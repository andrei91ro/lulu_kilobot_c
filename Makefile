CC = gcc
DEBUG = 0

ifeq ($(DEBUG),1)
  #debug & testing flags
  CFLAGS = -Wall -g -O0 -fbuiltin -c -DPCOL_SIM -DDEBUG=0
  BFLAGS = -Wall -g -O0 -fbuiltin -DPCOL_SIM -DDEBUG=0

  #compilation flags for simulated version
  SIM_CFLAGS = -c -g -O0 -Wall -std=c99
  #linking flags for simulated version
  SIM_LFLAGS = -lsim -lSDL -lm -ljansson
else
  #release flags
  CFLAGS = -Wall -g -O2 -fbuiltin -c -DPCOL_SIM -DDEBUG=1
  BFLAGS = -Wall -g -O2 -fbuiltin -DPCOL_SIM -DDEBUG=1

  #compilation flags for simulated version
  SIM_CFLAGS = -c -g -O2 -Wall -std=c99
  #linking flags for simulated version
  SIM_LFLAGS = -lsim -lSDL -lm -ljansson
endif

# path to the LULU P colony simulator
LULU_PCOL_SIM_PATH = /home/andrei/script_Python/lulu_pcol_sim
# path to the LULU P colony simulator script
LULU_PCOL_SIM = $(LULU_PCOL_SIM_PATH)/sim.py
# path to the lulu to C converter script
LULU_C = /home/andrei/script_Python/lulu_c/lulu_c.py
# path to one example instance file (can be set as an Environment variable to any Lulu formatted input file)
LULU_INSTANCE_FILE = $(LULU_PCOL_SIM_PATH)/input_files/input_ag_decrement.txt
# path to the LULU headers
LULU_HEADERS = ../lulu/src
# path to the LULU C library
LULU_LIB = ../lulu/build/liblulu.a

all: build/lulu_kilobot

clean:
	rm -vf build/*

clean_autogenerated_lulu:
	rm -vf src/instance.*

build/lulu_kilobot: build/lulu_kilobot.o build/instance.o
	$(CC) $(SIM_LFLAGS) $^ $(LULU_LIB) -o $@

build/lulu_kilobot.o: src/lulu_kilobot.c src/instance.h $(LULU_HEADERS)/rules.h
	$(CC) $(SIM_CFLAGS) -I$(LULU_HEADERS)/ src/lulu_kilobot.c -o $@

build/instance.o: src/instance.h src/instance.c $(LULU_HEADERS)/rules.h
	$(CC) $(CFLAGS) src/instance.c -I$(LULU_HEADERS)/ -o $@

src/instance.h src/instance.c:
	python $(LULU_C) $(LULU_INSTANCE_FILE) src/instance
